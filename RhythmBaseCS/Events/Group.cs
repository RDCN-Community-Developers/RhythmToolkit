using RhythmBase.Components;
using RhythmBase.Exceptions;
using System.Collections;

namespace RhythmBase.Events
{
	public abstract class Group : BaseEvent, IEnumerable<BaseEvent>
	{
		public override EventType Type => EventType.Group;
		public override Tabs Tab => Tabs.Unknown;
		public abstract IEnumerable<BaseEvent> GetEvents();
		internal IEnumerable<BaseEvent> GetTaggedEvents(string tag, string comment)
		{
			BaseEvent[] events = [.. GetEvents()];
			if (events.Any(e => e.Beat.IsEmpty))
				throw new InvalidRDBeatException() { };
			var startBeat = events.Min(i => i.Beat);
			yield return new TagAction()
			{
				Beat = startBeat,
				ActionTag = tag,
			};
			yield return new Comment()
			{
				Beat = startBeat,
				Text = comment,
			};
			foreach (BaseEvent ev in events)
			{
				if (string.IsNullOrEmpty(ev.Tag))
					ev.Tag = tag;
				else
				{
					string newTag = ev.Tag + "_" + tag;
					TagAction action = new()
					{
						Beat = ev.Beat,
						Tag = ev.Tag,
						ActionTag = newTag,
					};
					ev.Tag = newTag;
					yield return action;
				}
				yield return ev;
			}
		}
		public IEnumerator<BaseEvent> GetEnumerator() => (IEnumerator<BaseEvent>)GetTaggedEvents(
			$"RDTKGROUP_{GetHashCode():X8}",
			"/* Group events generated by RDTK. */"
			);
		IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
	}
}
